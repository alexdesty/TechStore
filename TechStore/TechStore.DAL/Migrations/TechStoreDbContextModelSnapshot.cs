// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechStore.DAL.Data;

#nullable disable

namespace TechStore.DAL.Migrations
{
    [DbContext(typeof(TechStoreDbContext))]
    partial class TechStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProperty", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("CategoryProperty");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 3
                        },
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 4
                        },
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 5
                        },
                        new
                        {
                            CategoryId = 1,
                            PropertyId = 6
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 4
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 5
                        },
                        new
                        {
                            CategoryId = 2,
                            PropertyId = 6
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Phones"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laptops"
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("DeliveryType")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShopAddressId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("ShopAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Nice phone",
                            Name = "Iphone 14 Pro Max",
                            Price = 999m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Nice laptop",
                            Name = "Apple MacBook Pro 16.2 M3 Pro",
                            Price = 3000m
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.ProductToProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ProductsToProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            PropertyId = 1,
                            Value = "6"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            PropertyId = 2,
                            Value = "128"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            PropertyId = 3,
                            Value = "1290x2796"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 1,
                            PropertyId = 4,
                            Value = "160,7"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 1,
                            PropertyId = 5,
                            Value = "77,6"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 1,
                            PropertyId = 6,
                            Value = "7,85"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 2,
                            PropertyId = 1,
                            Value = "18"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 2,
                            PropertyId = 2,
                            Value = "512"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 2,
                            PropertyId = 3,
                            Value = "3456x2234"
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 2,
                            PropertyId = 4,
                            Value = "355,7"
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 2,
                            PropertyId = 5,
                            Value = "248,1"
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 2,
                            PropertyId = 6,
                            Value = "16,8"
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RAM",
                            Type = "Gb"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ROM",
                            Type = "Gb"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Screen resolution",
                            Type = "px"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Length",
                            Type = "mm"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Width",
                            Type = "mm"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Height",
                            Type = "mm"
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.ShopAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("ShopAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Minsk, Independence avenue, 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Minsk, International street, 1"
                        });
                });

            modelBuilder.Entity("TechStore.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "emailadmin@mail.com",
                            Login = "admin",
                            Name = "Admin",
                            Password = "pass9393",
                            Role = 1,
                            Surname = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "emailmanager@mail.com",
                            Login = "manager",
                            Name = "Manager",
                            Password = "pass8787",
                            Role = 2,
                            Surname = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Email = "emailuser@mail.com",
                            Login = "user",
                            Name = "User",
                            Password = "pass7373",
                            Role = 3,
                            Surname = "Manager"
                        });
                });

            modelBuilder.Entity("CategoryProperty", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryProperty_Categories_CategoryId");

                    b.HasOne("TechStore.Domain.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryProperty_Properties_PropertyId");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("TechStore.Domain.Entities.Order", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStore.Domain.Entities.ShopAddress", "ShopAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShopAddressId");

                    b.HasOne("TechStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ShopAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.Category", "Category")
                        .WithOne("Product")
                        .HasForeignKey("TechStore.Domain.Entities.Product", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.ProductToProperty", b =>
                {
                    b.HasOne("TechStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductsToProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStore.Domain.Entities.Property", "Property")
                        .WithMany("ProductsToProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Category", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductsToProperties");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.Property", b =>
                {
                    b.Navigation("ProductsToProperties");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.ShopAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TechStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
